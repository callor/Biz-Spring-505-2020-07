<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">
		
	<!-- authProvider에서 UserDetailService를 사용해야 하기 때문에 -->
	<!-- 여기에 UserDetailService 클래스가 있는 패키지를 스캔하도록 -->
	<!-- >설정을 해줘야 한다 -->	
	<context:component-scan base-package="com.biz.book.service.auth"/>
	
	<!-- spring security에서 사용할 AuthenticationProvider를 구현한 -->
	<!-- 클래스를 bean 등록 -->
	<bean id="customAuthProvider" class="com.biz.book.auth.AuthProviderImpl" />
	
	<!-- 커스터마이징 된 AuthoProvider를 spring security에서 사용하도록 -->
	<!-- security:authentication-manager에 등록 -->
	<security:authentication-manager>
		<security:authentication-provider ref="customAuthProvider"/>
	</security:authentication-manager>
		
	<!-- spring security의 핵심 설정 부분 -->
	<!-- security:http -->
	<!-- login form 설정 -->
	<!-- login 방법 설정 -->
	<!-- login이 되었을때 인가, 권한에 관한 설정 -->
	<!-- login이 되었을때 URL 패턴에 따라 접근 권한을 세밀하게 부여할 수 있다 -->
	<!-- security:intercept 기능이다 -->
	<!-- 접근할 URL을 pattern 속성에 지정하고 -->
	<!-- 접근할 권한이 있는가를 검사하도록 access 속성에 지정한다 -->
	<!-- 패턴 지정에서 주의할 사항 -->
	<!-- 패턴은 URL의 단계가 깊을수록 위쪽에 먼저 작성을 해주어야 한다. -->
	<!-- 만약 /user/**, /user/a/b/c 순서로 패턴이 있을경우 /user/a/b/c는 무시된다 -->
	<!-- 이때는 /user/a/b/c, /user/** 순서로 패턴을 나열해야 한다. -->
	
	<!-- security:csrf 의 disabled 속성을 true로 설정하면 -->
	<!-- POST 전송시 Token을 첨부하지 않아도 사용가능하도록 한다 -->
	<!-- 단, 이방법은 다른 API와 연동할때를 제외하고 -->
	<!-- 	사용하지 않는 것이 좋다 -->
	<!-- 기본값은 항상 disbaled=false로 설정 한다. -->
	<security:http auto-config="true" use-expressions="true">
	
		<security:csrf disabled="false"/>
		<security:form-login
				username-parameter="username" 
				password-parameter="password"/>
		<security:logout logout-url="/logout" 
					logout-success-url="/" 
					invalidate-session="true"/>
		<security:intercept-url pattern="/admin/**"	access="hasRole('ADMIN')"/>
		<security:intercept-url pattern="/member/mypage" access="hasAnyRole('ADMIN','USER')"/>
		<security:intercept-url pattern="/member/password" access="hasAnyRole('ADMIN','USER')"/>
		<security:intercept-url pattern="/member/**" access="permitAll()"/>
		<security:intercept-url pattern="/books/**" 
						access="hasAnyRole('ADMIN','USER')"/>
		<security:intercept-url pattern="/**" access="permitAll()"/>
	</security:http>
	
	
	<!-- 회원가입, 로그인에서 사용자의 비밀번호를 암호화 하기 위하여 -->
	<!-- 암호화 도구를 bean으로 설정 -->
	<bean id="passwordEncoder" 
			class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="4" index="0"/>
	</bean>
	
</beans>



